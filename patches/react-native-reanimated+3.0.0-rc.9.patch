diff --git a/node_modules/react-native-reanimated/.DS_Store b/node_modules/react-native-reanimated/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-reanimated/Common/.DS_Store b/node_modules/react-native-reanimated/Common/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp
index d08bc41..6ae870b 100644
--- a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp
@@ -5,6 +5,8 @@
 #include <react/renderer/uimanager/primitives.h>
 #endif

+#include <react/renderer/debug/SystraceSection.h>
+
 #include <functional>
 #include <memory>
 #include <thread>
@@ -146,6 +148,10 @@ NativeReanimatedModule::NativeReanimatedModule(
       dispatchCommand,
 #else
       platformDepMethodsHolder.updatePropsFunction,
+#if __ANDROID__
+      platformDepMethodsHolder.updateUiPropsFunction,
+      platformDepMethodsHolder.updateNativePropsFunction,
+#endif
       platformDepMethodsHolder.measureFunction,
       platformDepMethodsHolder.scrollToFunction,
 #endif
@@ -168,6 +174,10 @@ NativeReanimatedModule::NativeReanimatedModule(
   // nothing
 #else
   updatePropsFunction = platformDepMethodsHolder.updatePropsFunction;
+#if __ANDROID__
+  updateUiPropsFunction = platformDepMethodsHolder.updateUiPropsFunction;
+  updateNativePropsFunction = platformDepMethodsHolder.updateNativePropsFunction;
+#endif
 #endif
   subscribeForKeyboardEventsFunction =
       platformDepMethodsHolder.subscribeForKeyboardEvents;
diff --git a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h
index d15f196..e144f95 100644
--- a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h
+++ b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h
@@ -104,6 +104,8 @@ class NativeReanimatedModule : public NativeReanimatedModuleSpec,

   void maybeRequestRender();
   UpdatePropsFunction updatePropsFunction;
+  UpdateUiPropsFunction updateUiPropsFunction;
+  UpdateNativePropsFunction updateNativePropsFunction;

   bool handleEvent(
       const std::string &eventName,
diff --git a/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h b/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h
index 7484141..3118dd2 100644
--- a/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h
+++ b/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h
@@ -10,6 +10,8 @@
 #include <react/renderer/uimanager/primitives.h>
 #endif

+#include <react/renderer/debug/SystraceSection.h>
+
 #include "ReanimatedRuntime.h"
 #include "RuntimeManager.h"
 #include "Scheduler.h"
@@ -93,6 +95,7 @@ class JSRuntimeHelper {
     // they can be presented using RN's LogBox.
     jsi::Runtime &rt = *uiRuntime_;
 #ifdef DEBUG
+    // SystraceSection s("JSI call");
     callGuard->call(rt, function, args...);
 #else
     function.asObject(rt).asFunction(rt).call(rt, args...);
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h b/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h
index cc91187..bca0a26 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h
@@ -43,6 +43,16 @@ using UpdatePropsFunction = std::function<void(
     int viewTag,
     const jsi::Value &viewName,
     const jsi::Object &object)>;
+using UpdateUiPropsFunction = std::function<void(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &viewName,
+    const jsi::Value &uiProps)>;
+using UpdateNativePropsFunction = std::function<void(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &viewName,
+    const jsi::Value &nativeProps)>;
 using ScrollToFunction = std::function<void(int, double, double, bool)>;
 using MeasureFunction =
     std::function<std::vector<std::pair<std::string, double>>(int)>;
@@ -75,6 +85,10 @@ struct PlatformDepMethodsHolder {
   SynchronouslyUpdateUIPropsFunction synchronouslyUpdateUIPropsFunction;
 #else
   UpdatePropsFunction updatePropsFunction;
+  #if __ANDROID__
+  UpdateUiPropsFunction updateUiPropsFunction;
+  UpdateNativePropsFunction updateNativePropsFunction;
+  #endif
   ScrollToFunction scrollToFunction;
   MeasureFunction measureFunction;
   ConfigurePropsFunction configurePropsFunction;
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp
index daa3adc..895e872 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp
@@ -1,11 +1,21 @@
 #include "RuntimeDecorator.h"
+#if __ANDROID__
+#include <android/trace.h>
+#endif
 #include <jsi/instrumentation.h>
+#if __ANDROID__
+#include <react/renderer/debug/SystraceSection.h>
+#endif
 #include <chrono>
 #include <memory>
 #include <unordered_map>
 #include <utility>
 #include "ReanimatedHiddenHeaders.h"

+#if __ANDROID__
+using namespace facebook::react;
+#endif
+
 namespace reanimated {

 std::unordered_map<RuntimePointer, RuntimeType>
@@ -103,6 +113,10 @@ void RuntimeDecorator::decorateRuntime(
 void RuntimeDecorator::decorateUIRuntime(
     jsi::Runtime &rt,
     const UpdatePropsFunction updateProps,
+#if __ANDROID__
+    const UpdateUiPropsFunction updateUiProps,
+    const UpdateNativePropsFunction updateNativeProps,
+#endif
     const MeasureFunction measure,
 #ifdef RCT_NEW_ARCH_ENABLED
     const RemoveShadowNodeFromRegistryFunction removeShadowNodeFromRegistry,
@@ -182,15 +196,52 @@ void RuntimeDecorator::decorateUIRuntime(
                  const jsi::Value *args,
                  const size_t count) -> jsi::Value {
     const auto viewTag = args[0].asNumber();
-    const jsi::Value *viewName = &args[1];
+    const auto &viewName = args[1];
     const auto params = args[2].asObject(rt);
-    updateProps(rt, viewTag, *viewName, params);
+    updateProps(rt, viewTag, viewName, params);
     return jsi::Value::undefined();
   };
   jsi::Value updatePropsHostFunction = jsi::Function::createFromHostFunction(
       rt, jsi::PropNameID::forAscii(rt, "_updatePropsPaper"), 3, clb);
   rt.global().setProperty(rt, "_updatePropsPaper", updatePropsHostFunction);

+#if __ANDROID__
+  auto clbUpdateUiPropsPaper = [updateUiProps](
+                  jsi::Runtime &rt,
+                  const jsi::Value &thisValue,
+                  const jsi::Value *args,
+                  const size_t count) -> jsi::Value {
+    const auto viewTag = args[0].asNumber();
+    const auto &viewName = args[1];
+    const auto &uiProps = args[2];
+    updateUiProps(rt, viewTag, viewName, uiProps);
+    return jsi::Value::undefined();
+  };
+  jsi::Value updateUiPropsHostFunction = jsi::Function::createFromHostFunction(
+      rt, jsi::PropNameID::forAscii(rt, "_updateUiPropsPaper"), 2, clbUpdateUiPropsPaper);
+  rt.global().setProperty(rt, "_updateUiPropsPaper", updateUiPropsHostFunction);
+
+  auto clbUpdateNativePropsPaper = [updateNativeProps](
+                   jsi::Runtime &rt,
+                   const jsi::Value &thisValue,
+                   const jsi::Value *args,
+                   const size_t count) -> jsi::Value {
+    const auto viewTag = args[0].asNumber();
+    const auto &viewName = args[1];
+    const auto &nativeProps = args[2];
+    updateNativeProps(rt, viewTag, viewName, nativeProps);
+    return jsi::Value::undefined();
+  };
+  jsi::Value updateNativePropsHostFunction =
+      jsi::Function::createFromHostFunction(
+          rt,
+          jsi::PropNameID::forAscii(rt, "_updateNativePropsPaper"),
+          2,
+          clbUpdateNativePropsPaper);
+  rt.global().setProperty(
+      rt, "_updateNativePropsPaper", updateNativePropsHostFunction);
+#endif
+
   auto _scrollTo = [scrollTo](
                        jsi::Runtime &rt,
                        const jsi::Value &thisValue,
@@ -327,6 +378,33 @@ void RuntimeDecorator::decorateUIRuntime(
   jsi::Value setGestureStateFunction = jsi::Function::createFromHostFunction(
       rt, jsi::PropNameID::forAscii(rt, "_setGestureState"), 2, clb9);
   rt.global().setProperty(rt, "_setGestureState", setGestureStateFunction);
+
+
+  auto clbBeginSection = [](jsi::Runtime &rt,
+                  const jsi::Value &thisValue,
+                  const jsi::Value *args,
+                  const size_t count) -> jsi::Value {
+#if __ANDROID__
+      ATrace_beginSection(args[0].asString(rt).utf8(rt).c_str());
+#endif
+    return jsi::Value::undefined();
+  };
+  jsi::Value fun10 = jsi::Function::createFromHostFunction(
+      rt, jsi::PropNameID::forAscii(rt, "_beginSection"), 1, clbBeginSection);
+  rt.global().setProperty(rt, "_beginSection", fun10);
+
+  auto clbEndSection = [](jsi::Runtime &rt,
+                  const jsi::Value &thisValue,
+                  const jsi::Value *args,
+                  const size_t count) -> jsi::Value {
+#if __ANDROID__
+      ATrace_endSection();
+#endif
+    return jsi::Value::undefined();
+  };
+  jsi::Value fun11 = jsi::Function::createFromHostFunction(
+      rt, jsi::PropNameID::forAscii(rt, "_endSection"), 0, clbEndSection);
+  rt.global().setProperty(rt, "_endSection", fun11);
 }

 } // namespace reanimated
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h
index f1d8cdd..14c68e1 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h
@@ -38,6 +38,10 @@ class RuntimeDecorator {
   static void decorateUIRuntime(
       jsi::Runtime &rt,
       const UpdatePropsFunction updateProps,
+#if __ANDROID__
+      const UpdateUiPropsFunction updateUiProps,
+      const UpdateNativePropsFunction updateNativeProps,
+#endif
       const MeasureFunction measure,
 #ifdef RCT_NEW_ARCH_ENABLED
       const RemoveShadowNodeFromRegistryFunction removeShadowNodeFromRegistry,
diff --git a/node_modules/react-native-reanimated/android/.DS_Store b/node_modules/react-native-reanimated/android/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-reanimated/android/build.gradle b/node_modules/react-native-reanimated/android/build.gradle
index b7cdd22..325470b 100644
--- a/node_modules/react-native-reanimated/android/build.gradle
+++ b/node_modules/react-native-reanimated/android/build.gradle
@@ -448,7 +448,7 @@ apply plugin: "de.undercouch.download"
 android {
     compileSdkVersion safeExtGet("compileSdkVersion", 30)
     defaultConfig {
-        minSdkVersion safeExtGet("minSdkVersion", 16)
+        minSdkVersion safeExtGet("minSdkVersion", 23)
         targetSdkVersion safeExtGet("targetSdkVersion", 30)
         versionCode 1
         versionName "1.0"
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp b/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp
index 2d0b200..b5d9f87 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp
@@ -1,5 +1,7 @@
 #include "JNIHelper.h"

+#include <react/renderer/debug/SystraceSection.h>
+
 namespace reanimated {

 using namespace facebook::jni;
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
index 2ee4404..c1910b1 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
@@ -120,6 +120,24 @@ void NativeProxy::installJSIBindings(
     this->updateProps(rt, viewTag, props);
   };

+  auto updateUiPropsFunction = [this](
+                                   jsi::Runtime &rt,
+                                   int viewTag,
+                                   const jsi::Value &viewName,
+                                   const jsi::Value &uiProps) {
+    // viewName is for iOS only, we skip it here
+    this->updateUiProps(rt, viewTag, uiProps);
+  };
+
+  auto updateNativePropsFunction = [this](
+                                       jsi::Runtime &rt,
+                                       int viewTag,
+                                       const jsi::Value &viewName,
+                                       const jsi::Value &nativeProps) {
+    // viewName is for iOS only, we skip it here
+    this->updateNativeProps(rt, viewTag, nativeProps);
+  };
+
   auto measureFunction =
       [this](int viewTag) -> std::vector<std::pair<std::string, double>> {
     return measure(viewTag);
@@ -167,7 +185,7 @@ void NativeProxy::installJSIBindings(
                           jsi::Runtime &rt,
                           const int viewTag,
                           const jsi::String &propName) -> jsi::Value {
-    auto method =
+    static const auto method =
         javaPart_->getClass()
             ->getMethod<jni::local_ref<JString>(int, jni::local_ref<JString>)>(
                 "obtainProp");
@@ -256,6 +274,8 @@ void NativeProxy::installJSIBindings(
       synchronouslyUpdateUIPropsFunction,
 #else
       updatePropsFunction,
+      updateUiPropsFunction,
+      updateNativePropsFunction,
       scrollToFunction,
       measureFunction,
       configurePropsFunction,
@@ -404,7 +424,7 @@ void NativeProxy::registerNatives() {
 }

 void NativeProxy::requestRender(std::function<void(double)> onRender) {
-  static auto method =
+  static const auto method =
       javaPart_->getClass()
           ->getMethod<void(AnimationFrameCallback::javaobject)>(
               "requestRender");
@@ -415,7 +435,7 @@ void NativeProxy::requestRender(std::function<void(double)> onRender) {

 void NativeProxy::registerEventHandler(
     std::function<void(std::string, std::string)> handler) {
-  static auto method =
+  static const auto method =
       javaPart_->getClass()->getMethod<void(EventHandler::javaobject)>(
           "registerEventHandler");
   method(
@@ -423,6 +443,16 @@ void NativeProxy::registerEventHandler(
       EventHandler::newObjectCxxArgs(std::move(handler)).get());
 }

+inline jni::local_ref<ReadableMap::javaobject> castReadableMap(
+    jni::local_ref<ReadableNativeMap::javaobject> const &nativeMap) {
+  return make_local(reinterpret_cast<ReadableMap::javaobject>(nativeMap.get()));
+}
+
+inline jni::local_ref<WritableMap::javaobject> castWritableMap(
+    jni::local_ref<WritableNativeMap::javaobject> const &nativeMap) {
+  return make_local(reinterpret_cast<WritableMap::javaobject>(nativeMap.get()));
+}
+
 #ifdef RCT_NEW_ARCH_ENABLED
 // nothing
 #else
@@ -430,22 +460,52 @@ void NativeProxy::updateProps(
     jsi::Runtime &rt,
     int viewTag,
     const jsi::Object &props) {
-  auto method = javaPart_->getClass()
-                    ->getMethod<void(int, JMap<JString, JObject>::javaobject)>(
-                        "updateProps");
+  static const auto method =
+      javaPart_->getClass()
+          ->getMethod<void(int, JMap<JString, JObject>::javaobject)>(
+              "updateProps");
   method(
       javaPart_.get(), viewTag, JNIHelper::ConvertToPropsMap(rt, props).get());
 }

+void NativeProxy::updateUiProps(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &uiProps) {
+  // SystraceSection s("NativeProxy::updateUiProps");
+  static const auto method =
+      javaPart_->getClass()
+          ->getMethod<void(int, jni::local_ref<ReadableMap::javaobject>)>(
+              "updateUiProps");
+  jni::local_ref<ReadableMap::javaobject> javaUiProps = castReadableMap(
+      ReadableNativeMap::newObjectCxxArgs(jsi::dynamicFromValue(rt, uiProps)));
+  method(javaPart_.get(), viewTag, javaUiProps);
+}
+
+void NativeProxy::updateNativeProps(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &nativeProps) {
+  // SystraceSection s("NativeProxy::updateNativeProps");
+  static const auto method =
+      javaPart_->getClass()
+          ->getMethod<void(int, jni::local_ref<WritableMap::javaobject>)>(
+              "updateNativeProps");
+  jni::local_ref<WritableMap::javaobject> javaNativeProps =
+      castWritableMap(WritableNativeMap::newObjectCxxArgs(
+          jsi::dynamicFromValue(rt, nativeProps)));
+  method(javaPart_.get(), viewTag, javaNativeProps);
+}
+
 void NativeProxy::scrollTo(int viewTag, double x, double y, bool animated) {
-  auto method =
+  static const auto method =
       javaPart_->getClass()->getMethod<void(int, double, double, bool)>(
           "scrollTo");
   method(javaPart_.get(), viewTag, x, y, animated);
 }

 std::vector<std::pair<std::string, double>> NativeProxy::measure(int viewTag) {
-  auto method =
+  static const auto method =
       javaPart_->getClass()->getMethod<local_ref<JArrayFloat>(int)>("measure");
   local_ref<JArrayFloat> output = method(javaPart_.get(), viewTag);
   size_t size = output->size();
@@ -466,10 +526,10 @@ std::vector<std::pair<std::string, double>> NativeProxy::measure(int viewTag) {
 #endif // RCT_NEW_ARCH_ENABLED

 #ifdef RCT_NEW_ARCH_ENABLED
-inline jni::local_ref<ReadableMap::javaobject> castReadableMap(
-    jni::local_ref<ReadableNativeMap::javaobject> const &nativeMap) {
-  return make_local(reinterpret_cast<ReadableMap::javaobject>(nativeMap.get()));
-}
+// inline jni::local_ref<ReadableMap::javaobject> castReadableMap(
+//     jni::local_ref<ReadableNativeMap::javaobject> const &nativeMap) {
+//   return make_local(reinterpret_cast<ReadableMap::javaobject>(nativeMap.get()));
+// }

 void NativeProxy::synchronouslyUpdateUIProps(
     jsi::Runtime &rt,
@@ -489,7 +549,7 @@ int NativeProxy::registerSensor(
     int sensorType,
     int interval,
     std::function<void(double[])> setter) {
-  static auto method =
+  static const auto method =
       javaPart_->getClass()->getMethod<int(int, int, SensorSetter::javaobject)>(
           "registerSensor");
   return method(
@@ -499,12 +559,12 @@ int NativeProxy::registerSensor(
       SensorSetter::newObjectCxxArgs(std::move(setter)).get());
 }
 void NativeProxy::unregisterSensor(int sensorId) {
-  auto method = javaPart_->getClass()->getMethod<void(int)>("unregisterSensor");
+  static const auto method = javaPart_->getClass()->getMethod<void(int)>("unregisterSensor");
   method(javaPart_.get(), sensorId);
 }

 void NativeProxy::setGestureState(int handlerTag, int newState) {
-  auto method =
+  static const auto method =
       javaPart_->getClass()->getMethod<void(int, int)>("setGestureState");
   method(javaPart_.get(), handlerTag, newState);
 }
@@ -513,7 +573,7 @@ void NativeProxy::configureProps(
     jsi::Runtime &rt,
     const jsi::Value &uiProps,
     const jsi::Value &nativeProps) {
-  auto method = javaPart_->getClass()
+  static const auto method = javaPart_->getClass()
                     ->getMethod<void(
                         ReadableNativeArray::javaobject,
                         ReadableNativeArray::javaobject)>("configureProps");
@@ -528,7 +588,7 @@ void NativeProxy::configureProps(

 int NativeProxy::subscribeForKeyboardEvents(
     std::function<void(int, int)> keyboardEventDataUpdater) {
-  auto method = javaPart_->getClass()
+  static const auto method = javaPart_->getClass()
                     ->getMethod<int(KeyboardEventDataUpdater::javaobject)>(
                         "subscribeForKeyboardEvents");
   return method(
@@ -539,7 +599,7 @@ int NativeProxy::subscribeForKeyboardEvents(
 }

 void NativeProxy::unsubscribeFromKeyboardEvents(int listenerId) {
-  auto method = javaPart_->getClass()->getMethod<void(int)>(
+  static const auto method = javaPart_->getClass()->getMethod<void(int)>(
       "unsubscribeFromKeyboardEvents");
   method(javaPart_.get(), listenerId);
 }
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h
index d02917d..9c97828 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h
@@ -188,10 +188,6 @@ class NativeProxy : public jni::HybridClass<NativeProxy> {
   void installJSIBindings(
       jni::alias_ref<JavaMessageQueueThread::javaobject> messageQueueThread,
       jni::alias_ref<JFabricUIManager::javaobject> fabricUIManager);
-  void synchronouslyUpdateUIProps(
-      jsi::Runtime &rt,
-      Tag viewTag,
-      const jsi::Value &uiProps);
 #else
   void installJSIBindings(
       jni::alias_ref<JavaMessageQueueThread::javaobject> messageQueueThread);
@@ -215,9 +211,14 @@ class NativeProxy : public jni::HybridClass<NativeProxy> {
       std::function<void(int, int)> keyboardEventDataUpdater);
   void unsubscribeFromKeyboardEvents(int listenerId);
 #ifdef RCT_NEW_ARCH_ENABLED
-  // nothing
+  void synchronouslyUpdateUIProps(
+      jsi::Runtime &rt,
+      Tag viewTag,
+      const jsi::Value &uiProps);
 #else
   void updateProps(jsi::Runtime &rt, int viewTag, const jsi::Object &props);
+  void updateUiProps(jsi::Runtime &rt, int viewTag, const jsi::Value &uiProps);
+  void updateNativeProps(jsi::Runtime &rt, int viewTag, const jsi::Value &nativeProps);
   void scrollTo(int viewTag, double x, double y, bool animated);
   std::vector<std::pair<std::string, double>> measure(int viewTag);
 #endif
diff --git a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java
index 1d18851..e90744b 100644
--- a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java
+++ b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java
@@ -26,6 +26,7 @@ import com.facebook.react.uimanager.UIManagerReanimatedHelper;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.EventDispatcherListener;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
+import com.facebook.systrace.Systrace;
 import com.swmansion.reanimated.layoutReanimation.AnimationsManager;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -366,6 +367,18 @@ public class NodesManager implements EventDispatcherListener {
     }
   }

+  public void updateUiProps(int viewTag, ReadableMap uiProps) {
+    if (viewTag != View.NO_ID) {
+      mUIImplementation.synchronouslyUpdateViewOnUIThread(viewTag, new ReactStylesDiffMap(uiProps));
+    }
+  }
+
+  public void updateNativeProps(int viewTag, WritableMap nativeProps) {
+    if (viewTag != View.NO_ID) {
+      enqueueUpdateViewOnNativeThread(viewTag, nativeProps, true);
+    }
+  }
+
   public void synchronouslyUpdateUIProps(int viewTag, ReadableMap uiProps) {
     compatibility.synchronouslyUpdateUIProps(viewTag, uiProps);
   }
diff --git a/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java b/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java
index 2922d41..ff72756 100644
--- a/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java
+++ b/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java
@@ -195,7 +195,17 @@ public class NativeProxy {
   }

   @DoNotStrip
-  private void synchronouslyUpdateUIProps(int viewTag, ReadableMap uiProps) {
+  private void updateUiProps(int viewTag, ReadableMap uiProps) {
+    mNodesManager.updateUiProps(viewTag, uiProps);
+  }
+
+  @DoNotStrip
+  private void updateNativeProps(int viewTag, WritableMap nativeProps) {
+    mNodesManager.updateNativeProps(viewTag, nativeProps);
+  }
+
+  @DoNotStrip
+  private void synchronouslyUpdateUIProps(int viewTag, WritableMap uiProps) {
     mNodesManager.synchronouslyUpdateUIProps(viewTag, uiProps);
   }

diff --git a/node_modules/react-native-reanimated/ios/.DS_Store b/node_modules/react-native-reanimated/ios/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-reanimated/lib/.DS_Store b/node_modules/react-native-reanimated/lib/.DS_Store
new file mode 100644
index 0000000..e69de29
diff --git a/node_modules/react-native-reanimated/plugin.js b/node_modules/react-native-reanimated/plugin.js
index 5274aaf..fb667f5 100644
--- a/node_modules/react-native-reanimated/plugin.js
+++ b/node_modules/react-native-reanimated/plugin.js
@@ -73,7 +73,11 @@ const globals = new Set([
   '_updateDataSynchronously',
   'eval',
   '_updatePropsPaper',
+  '_updateUiPropsPaper',
+  '_updateNativePropsPaper',
   '_updatePropsFabric',
+  '_beginSection',
+  '_endSection',
   '_removeShadowNodeFromRegistry',
   'RegExp',
   'Error',
@@ -146,6 +150,7 @@ const blacklistedFunctions = new Set([
   'call',
   '__callAsync',
   'includes',
+  'has',
 ]);

 const possibleOptFunction = new Set(['interpolate']);
diff --git a/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts b/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts
index 174405a..6bca6d6 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts
@@ -7,6 +7,7 @@ import { Descriptor } from './hook/commonTypes';
 import { _updatePropsJS } from './js-reanimated';
 import { shouldBeUseWeb } from './PlatformChecker';
 import { ViewRefSet } from './ViewDescriptorsSet';
+import { Platform } from 'react-native';

 // copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes
 export const colorProps = [
@@ -28,6 +29,105 @@ export const colorProps = [

 export const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);

+const uiPropsSet = Object.keys({
+  opacity: true,
+  transform: true,
+  /* colors */
+  backgroundColor: true,
+  borderRightColor: true,
+  borderBottomColor: true,
+  borderColor: true,
+  borderEndColor: true,
+  borderLeftColor: true,
+  borderStartColor: true,
+  borderTopColor: true,
+  /* ios styles */
+  shadowOpacity: true,
+  shadowRadius: true,
+  /* legacy android transform properties */
+  scaleX: true,
+  scaleY: true,
+  translateX: true,
+  translateY: true,
+});
+
+const nativePropsSet = Object.keys({
+  borderBottomWidth: true,
+  borderEndWidth: true,
+  borderLeftWidth: true,
+  borderRightWidth: true,
+  borderStartWidth: true,
+  borderTopWidth: true,
+  borderWidth: true,
+  bottom: true,
+  flex: true,
+  flexGrow: true,
+  flexShrink: true,
+  height: true,
+  left: true,
+  margin: true,
+  marginBottom: true,
+  marginEnd: true,
+  marginHorizontal: true,
+  marginLeft: true,
+  marginRight: true,
+  marginStart: true,
+  marginTop: true,
+  marginVertical: true,
+  maxHeight: true,
+  maxWidth: true,
+  minHeight: true,
+  minWidth: true,
+  padding: true,
+  paddingBottom: true,
+  paddingEnd: true,
+  paddingHorizontal: true,
+  paddingLeft: true,
+  paddingRight: true,
+  paddingStart: true,
+  paddingTop: true,
+  paddingVertical: true,
+  right: true,
+  start: true,
+  top: true,
+  width: true,
+  zIndex: true,
+  borderBottomEndRadius: true,
+  borderBottomLeftRadius: true,
+  borderBottomRightRadius: true,
+  borderBottomStartRadius: true,
+  borderRadius: true,
+  borderTopEndRadius: true,
+  borderTopLeftRadius: true,
+  borderTopRightRadius: true,
+  borderTopStartRadius: true,
+  elevation: true,
+  fontSize: true,
+  lineHeight: true,
+  textShadowRadius: true,
+  letterSpacing: true,
+  /* strings */
+  display: true,
+  backfaceVisibility: true,
+  overflow: true,
+  resizeMode: true,
+  fontStyle: true,
+  fontWeight: true,
+  textAlign: true,
+  textDecorationLine: true,
+  fontFamily: true,
+  textAlignVertical: true,
+  fontVariant: true,
+  textDecorationStyle: true,
+  textTransform: true,
+  writingDirection: true,
+  /* text color */
+  color: true,
+  tintColor: true,
+  shadowColor: true,
+  placeholderTextColor: true,
+});
+
 let updatePropsByPlatform;
 if (shouldBeUseWeb()) {
   updatePropsByPlatform = (
@@ -74,8 +174,36 @@ if (shouldBeUseWeb()) {
           updates[key] = processColor(updates[key]);
         }
       }
+
+      let nativeUpdatePropsFunction: typeof _updatePropsPaper = _updatePropsPaper;
+
+      if (Platform.OS === 'android') {
+        let hasNativeProps = false;
+        let hasJsProps = false;
+        for (const key of Object.keys(updates)) {
+          if (uiPropsSet.includes(key)) {
+            // do nothing
+          } else if (nativePropsSet.includes(key)) {
+            hasNativeProps = true;
+          } else {
+            hasJsProps = true;
+          }
+        }
+
+        if (!hasNativeProps && !hasJsProps) {
+          // only UI props
+          nativeUpdatePropsFunction = _updateUiPropsPaper;
+        } else if (!hasJsProps) {
+          // only UI or native props
+          nativeUpdatePropsFunction = _updateNativePropsPaper;
+        } else {
+          // has JS props, use general implementation
+          nativeUpdatePropsFunction = _updatePropsPaper;
+        }
+      }
+
       viewDescriptors.value.forEach((viewDescriptor) => {
-        _updatePropsPaper(
+        nativeUpdatePropsFunction(
           viewDescriptor.tag,
           viewDescriptor.name || 'RCTView',
           updates
diff --git a/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts b/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts
index 5b35eda..a84005c 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts
@@ -45,6 +45,16 @@ declare global {
     name: string,
     updates: StyleProps | AnimatedStyle
   ) => void;
+  const _updateUiPropsPaper: (
+    tag: number,
+    name: string,
+    updates: StyleProps | AnimatedStyle
+  ) => void;
+  const _updateNativePropsPaper: (
+    tag: number,
+    name: string,
+    updates: StyleProps | AnimatedStyle
+  ) => void;
   const _updatePropsFabric: (
     shadowNodeWrapper: ShadowNodeWrapper,
     props: StyleProps | AnimatedStyle
@@ -75,6 +85,8 @@ declare global {
   const _frameCallbackRegistry: FrameCallbackRegistryUI;
   const requestAnimationFrame: (callback: (time: number) => void) => number;
   const console: Console;
+  const _beginSection: (name: string) => void;
+  const _endSection: () => void;

   namespace NodeJS {
     interface Global {
@@ -141,6 +153,8 @@ declare global {
       __mapperRegistry?: MapperRegistry;
       requestAnimationFrame: (callback: (time: number) => void) => number;
       console: Console;
+      _beginSection: (name: string) => void;
+      _endSection: () => void;
     }
   }
 }
diff --git a/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts b/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts
index 50533d1..e9990f9 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts
@@ -485,6 +485,7 @@ export function useAnimatedStyle<T extends AnimatedStyle>(
       };
     }
     const mapperId = startMapper(fun, inputs);
+    // console.log('Updater: ', mapperId, updater.asString)
     return () => {
       stopMapper(mapperId);
     };
diff --git a/node_modules/react-native-reanimated/src/reanimated2/mappers.ts b/node_modules/react-native-reanimated/src/reanimated2/mappers.ts
index 4bb300e..10d9ac1 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/mappers.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/mappers.ts
@@ -126,10 +126,12 @@ export function createMapperRegistry() {
         inputs: extractInputs(inputs, []),
         outputs,
       };
+      // console.log('Start mapper: ', mapperID, Object.keys(mapper.inputs));
       mappers.set(mapper.id, mapper);
       sortedMappers = [];
       for (const sv of mapper.inputs) {
         sv.addListener(mapper.id, () => {
+          // console.log('Run mapper: ', mapper.id, sv.value);
           mapper.dirty = true;
           maybeRequestUpdates();
         });
@@ -137,6 +139,7 @@ export function createMapperRegistry() {
       maybeRequestUpdates();
     },
     stop: (mapperID: number) => {
+      // console.log('Stop mapper: ', mapperID);
       const mapper = mappers.get(mapperID);
       if (mapper) {
         mappers.delete(mapper.id);
