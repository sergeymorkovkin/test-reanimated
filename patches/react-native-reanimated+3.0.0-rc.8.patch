diff --git a/node_modules/react-native-reanimated/.DS_Store b/node_modules/react-native-reanimated/.DS_Store
new file mode 100644
index 0000000..f03b68d
Binary files /dev/null and b/node_modules/react-native-reanimated/.DS_Store differ
diff --git a/node_modules/react-native-reanimated/Common/.DS_Store b/node_modules/react-native-reanimated/Common/.DS_Store
new file mode 100644
index 0000000..696446c
Binary files /dev/null and b/node_modules/react-native-reanimated/Common/.DS_Store differ
diff --git a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp
index b9a31a8..6638c6f 100644
--- a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.cpp
@@ -5,6 +5,8 @@
 #include <react/renderer/uimanager/primitives.h>
 #endif
 
+#include <react/renderer/debug/SystraceSection.h>
+
 #include <functional>
 #include <memory>
 #include <thread>
@@ -143,6 +145,8 @@ NativeReanimatedModule::NativeReanimatedModule(
       dispatchCommand,
 #else
       platformDepMethodsHolder.updatePropsFunction,
+      platformDepMethodsHolder.updateUiPropsFunction,
+      platformDepMethodsHolder.updateNativePropsFunction,
       platformDepMethodsHolder.measureFunction,
       platformDepMethodsHolder.scrollToFunction,
 #endif
@@ -206,12 +210,16 @@ void NativeReanimatedModule::scheduleOnUI(
       shareableWorklet->valueType() == Shareable::WorkletType &&
       "only worklets can be scheduled to run on UI");
   auto uiRuntime = runtimeHelper->uiRuntime();
-  frameCallbacks.push_back([=](double timestamp) {
+
+  // frameCallbacks.push_back([=](double timestamp) {
+  // See https://github.com/software-mansion/react-native-reanimated/pull/3859/files
+  scheduler->scheduleOnUI([=] {
     jsi::Runtime &rt = *uiRuntime;
     auto workletValue = shareableWorklet->getJSValue(rt);
     workletValue.asObject(rt).asFunction(rt).call(rt);
   });
-  maybeRequestRender();
+
+  // maybeRequestRender();
 }
 
 jsi::Value NativeReanimatedModule::makeSynchronizedDataHolder(
diff --git a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h
index 1ae695b..338d522 100644
--- a/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h
+++ b/node_modules/react-native-reanimated/Common/cpp/NativeModules/NativeReanimatedModule.h
@@ -104,6 +104,8 @@ class NativeReanimatedModule : public NativeReanimatedModuleSpec,
 
   void maybeRequestRender();
   UpdatePropsFunction updatePropsFunction;
+  UpdateUiPropsFunction updateUiPropsFunction;
+  UpdateNativePropsFunction updateNativePropsFunction;
 
   bool handleEvent(
       const std::string &eventName,
diff --git a/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h b/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h
index 0b9ff0e..70f9806 100644
--- a/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h
+++ b/node_modules/react-native-reanimated/Common/cpp/SharedItems/Shareables.h
@@ -10,6 +10,8 @@
 #include <react/renderer/uimanager/primitives.h>
 #endif
 
+#include <react/renderer/debug/SystraceSection.h>
+
 #include "ReanimatedRuntime.h"
 #include "RuntimeManager.h"
 #include "Scheduler.h"
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h b/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h
index cc91187..08b9cb4 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/PlatformDepMethodsHolder.h
@@ -43,6 +43,16 @@ using UpdatePropsFunction = std::function<void(
     int viewTag,
     const jsi::Value &viewName,
     const jsi::Object &object)>;
+using UpdateUiPropsFunction = std::function<void(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &viewName,
+    const jsi::Value &uiProps)>;
+using UpdateNativePropsFunction = std::function<void(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &viewName,
+    const jsi::Value &nativeProps)>;
 using ScrollToFunction = std::function<void(int, double, double, bool)>;
 using MeasureFunction =
     std::function<std::vector<std::pair<std::string, double>>(int)>;
@@ -75,6 +85,8 @@ struct PlatformDepMethodsHolder {
   SynchronouslyUpdateUIPropsFunction synchronouslyUpdateUIPropsFunction;
 #else
   UpdatePropsFunction updatePropsFunction;
+  UpdateUiPropsFunction updateUiPropsFunction;
+  UpdateNativePropsFunction updateNativePropsFunction;
   ScrollToFunction scrollToFunction;
   MeasureFunction measureFunction;
   ConfigurePropsFunction configurePropsFunction;
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp
index 1ed79a0..7b07dce 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.cpp
@@ -1,11 +1,15 @@
 #include "RuntimeDecorator.h"
+#include <android/trace.h>
 #include <jsi/instrumentation.h>
+#include <react/renderer/debug/SystraceSection.h>
 #include <chrono>
 #include <memory>
 #include <unordered_map>
 #include <utility>
 #include "ReanimatedHiddenHeaders.h"
 
+using namespace facebook::react;
+
 namespace reanimated {
 
 std::unordered_map<RuntimePointer, RuntimeType>
@@ -30,9 +34,12 @@ void RuntimeDecorator::decorateRuntime(
   rt.global().setProperty(
       rt, "_LABEL", jsi::String::createFromAscii(rt, label));
 
-  jsi::Object dummyGlobal(rt);
-  dummyGlobal.setProperty(rt, "gc", rt.global().getProperty(rt, "gc"));
-  rt.global().setProperty(rt, "global", dummyGlobal);
+  // See https://github.com/software-mansion/react-native-reanimated/pull/3838/files
+  rt.global().setProperty(rt, "global", rt.global());
+
+  // jsi::Object dummyGlobal(rt);
+  // dummyGlobal.setProperty(rt, "gc", rt.global().getProperty(rt, "gc"));
+  // rt.global().setProperty(rt, "global", dummyGlobal);
 
   rt.global().setProperty(rt, "jsThis", jsi::Value::undefined());
 
@@ -98,6 +105,8 @@ void RuntimeDecorator::decorateRuntime(
 void RuntimeDecorator::decorateUIRuntime(
     jsi::Runtime &rt,
     const UpdatePropsFunction updateProps,
+    const UpdateUiPropsFunction updateUiProps,
+    const UpdateNativePropsFunction updateNativeProps,
     const MeasureFunction measure,
 #ifdef RCT_NEW_ARCH_ENABLED
     const RemoveShadowNodeFromRegistryFunction removeShadowNodeFromRegistry,
@@ -171,21 +180,59 @@ void RuntimeDecorator::decorateUIRuntime(
     return measure(rt, args[0]);
   };
 #else
-  auto clb = [updateProps](
+  auto clbUpdateProps = [updateProps](
                  jsi::Runtime &rt,
                  const jsi::Value &thisValue,
                  const jsi::Value *args,
                  const size_t count) -> jsi::Value {
+    SystraceSection s("_updatePropsPaper/CPP");
     const auto viewTag = args[0].asNumber();
-    const jsi::Value *viewName = &args[1];
+    const auto &viewName = args[1];
     const auto params = args[2].asObject(rt);
-    updateProps(rt, viewTag, *viewName, params);
+    updateProps(rt, viewTag, viewName, params);
     return jsi::Value::undefined();
   };
   jsi::Value updatePropsHostFunction = jsi::Function::createFromHostFunction(
-      rt, jsi::PropNameID::forAscii(rt, "_updatePropsPaper"), 3, clb);
+      rt, jsi::PropNameID::forAscii(rt, "_updatePropsPaper"), 3, clbUpdateProps);
   rt.global().setProperty(rt, "_updatePropsPaper", updatePropsHostFunction);
 
+  auto clbUpdateUiProps = [updateUiProps](
+                  jsi::Runtime &rt,
+                  const jsi::Value &thisValue,
+                  const jsi::Value *args,
+                  const size_t count) -> jsi::Value {
+    SystraceSection s("_updateUiPropsPaper/CPP");
+    const auto viewTag = args[0].asNumber();
+    const auto &viewName = args[1];
+    const auto &uiProps = args[2];
+    updateUiProps(rt, viewTag, viewName, uiProps);
+    return jsi::Value::undefined();
+  };
+  jsi::Value updateUiPropsHostFunction = jsi::Function::createFromHostFunction(
+      rt, jsi::PropNameID::forAscii(rt, "_updateUiPropsPaper"), 2, clbUpdateUiProps);
+  rt.global().setProperty(rt, "_updateUiPropsPaper", updateUiPropsHostFunction);
+
+  auto clbUpdateNativeProps = [updateNativeProps](
+                   jsi::Runtime &rt,
+                   const jsi::Value &thisValue,
+                   const jsi::Value *args,
+                   const size_t count) -> jsi::Value {
+    SystraceSection s("_updateNativePropsPaper/CPP");
+    const auto viewTag = args[0].asNumber();
+    const auto &viewName = args[1];
+    const auto &nativeProps = args[2];
+    updateNativeProps(rt, viewTag, viewName, nativeProps);
+    return jsi::Value::undefined();
+  };
+  jsi::Value updateNativePropsHostFunction =
+      jsi::Function::createFromHostFunction(
+          rt,
+          jsi::PropNameID::forAscii(rt, "_updateNativePropsPaper"),
+          2,
+          clbUpdateNativeProps);
+  rt.global().setProperty(
+      rt, "_updateNativePropsPaper", updateNativePropsHostFunction);
+
   auto _scrollTo = [scrollTo](
                        jsi::Runtime &rt,
                        const jsi::Value &thisValue,
@@ -326,6 +373,31 @@ void RuntimeDecorator::decorateUIRuntime(
   jsi::Value setGestureStateFunction = jsi::Function::createFromHostFunction(
       rt, jsi::PropNameID::forAscii(rt, "_setGestureState"), 2, clb9);
   rt.global().setProperty(rt, "_setGestureState", setGestureStateFunction);
+
+  auto clb10 = [](
+                jsi::Runtime &rt,
+                const jsi::Value &thisValue,
+                const jsi::Value *args,
+                const size_t count) -> jsi::Value {
+    ATrace_beginSection(args[0].asString(rt).utf8(rt).c_str());
+    return jsi::Value::undefined();
+  };
+  jsi::Value fun10 = jsi::Function::createFromHostFunction(
+      rt, jsi::PropNameID::forAscii(rt, "_beginSection"), 1, clb10);
+  rt.global().setProperty(rt, "_beginSection", fun10);
+
+  auto clb11 = [](
+                jsi::Runtime &rt,
+                const jsi::Value &thisValue,
+                const jsi::Value *args,
+                const size_t count) -> jsi::Value {
+    ATrace_endSection();
+    return jsi::Value::undefined();
+  };
+  jsi::Value fun11 = jsi::Function::createFromHostFunction(
+      rt, jsi::PropNameID::forAscii(rt, "_endSection"), 0, clb11);
+  rt.global().setProperty(rt, "_endSection", fun11);
+
 }
 
 } // namespace reanimated
diff --git a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h
index 5b0f9b2..28182b7 100644
--- a/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h
+++ b/node_modules/react-native-reanimated/Common/cpp/Tools/RuntimeDecorator.h
@@ -37,6 +37,8 @@ class RuntimeDecorator {
   static void decorateUIRuntime(
       jsi::Runtime &rt,
       const UpdatePropsFunction updateProps,
+      const UpdateUiPropsFunction updateUiProps,
+      const UpdateNativePropsFunction updateNativeProps,
       const MeasureFunction measure,
 #ifdef RCT_NEW_ARCH_ENABLED
       const RemoveShadowNodeFromRegistryFunction removeShadowNodeFromRegistry,
diff --git a/node_modules/react-native-reanimated/android/.DS_Store b/node_modules/react-native-reanimated/android/.DS_Store
new file mode 100644
index 0000000..0718ce0
Binary files /dev/null and b/node_modules/react-native-reanimated/android/.DS_Store differ
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp b/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp
index 2d0b200..b5d9f87 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/JNIHelper.cpp
@@ -1,5 +1,7 @@
 #include "JNIHelper.h"
 
+#include <react/renderer/debug/SystraceSection.h>
+
 namespace reanimated {
 
 using namespace facebook::jni;
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
index 2ee4404..c00e40f 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.cpp
@@ -120,6 +120,24 @@ void NativeProxy::installJSIBindings(
     this->updateProps(rt, viewTag, props);
   };
 
+  auto updateUiPropsFunction = [this](
+                                   jsi::Runtime &rt,
+                                   int viewTag,
+                                   const jsi::Value &viewName,
+                                   const jsi::Value &uiProps) {
+    // viewName is for iOS only, we skip it here
+    this->updateUiProps(rt, viewTag, uiProps);
+  };
+
+  auto updateNativePropsFunction = [this](
+                                       jsi::Runtime &rt,
+                                       int viewTag,
+                                       const jsi::Value &viewName,
+                                       const jsi::Value &nativeProps) {
+    // viewName is for iOS only, we skip it here
+    this->updateNativeProps(rt, viewTag, nativeProps);
+  };
+
   auto measureFunction =
       [this](int viewTag) -> std::vector<std::pair<std::string, double>> {
     return measure(viewTag);
@@ -132,7 +150,7 @@ void NativeProxy::installJSIBindings(
 #endif
 
   auto getCurrentTime = [this]() {
-    static const auto method =
+    static auto method =
         javaPart_->getClass()->getMethod<jlong()>("getCurrentTime");
     jlong output = method(javaPart_.get());
     return static_cast<double>(output);
@@ -167,7 +185,7 @@ void NativeProxy::installJSIBindings(
                           jsi::Runtime &rt,
                           const int viewTag,
                           const jsi::String &propName) -> jsi::Value {
-    auto method =
+    static auto method =
         javaPart_->getClass()
             ->getMethod<jni::local_ref<JString>(int, jni::local_ref<JString>)>(
                 "obtainProp");
@@ -256,6 +274,8 @@ void NativeProxy::installJSIBindings(
       synchronouslyUpdateUIPropsFunction,
 #else
       updatePropsFunction,
+      updateUiPropsFunction,
+      updateNativePropsFunction,
       scrollToFunction,
       measureFunction,
       configurePropsFunction,
@@ -423,6 +443,16 @@ void NativeProxy::registerEventHandler(
       EventHandler::newObjectCxxArgs(std::move(handler)).get());
 }
 
+inline jni::local_ref<ReadableMap::javaobject> castReadableMap(
+    jni::local_ref<ReadableNativeMap::javaobject> const &nativeMap) {
+  return make_local(reinterpret_cast<ReadableMap::javaobject>(nativeMap.get()));
+}
+
+inline jni::local_ref<WritableMap::javaobject> castWritableMap(
+    jni::local_ref<WritableNativeMap::javaobject> const &nativeMap) {
+  return make_local(reinterpret_cast<WritableMap::javaobject>(nativeMap.get()));
+}
+
 #ifdef RCT_NEW_ARCH_ENABLED
 // nothing
 #else
@@ -430,22 +460,53 @@ void NativeProxy::updateProps(
     jsi::Runtime &rt,
     int viewTag,
     const jsi::Object &props) {
-  auto method = javaPart_->getClass()
-                    ->getMethod<void(int, JMap<JString, JObject>::javaobject)>(
-                        "updateProps");
+  SystraceSection s("NativeProxy::updateProps/CPP");
+  static const auto method =
+      javaPart_->getClass()
+          ->getMethod<void(int, JMap<JString, JObject>::javaobject)>(
+              "updateProps");
   method(
       javaPart_.get(), viewTag, JNIHelper::ConvertToPropsMap(rt, props).get());
 }
 
+void NativeProxy::updateUiProps(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &uiProps) {
+  SystraceSection s("NativeProxy::updateUiProps/CPP");
+  static const auto method =
+      javaPart_->getClass()
+          ->getMethod<void(int, jni::local_ref<ReadableMap::javaobject>)>(
+              "updateUiProps");
+  jni::local_ref<ReadableMap::javaobject> javaUiProps = castReadableMap(
+      ReadableNativeMap::newObjectCxxArgs(jsi::dynamicFromValue(rt, uiProps)));
+  method(javaPart_.get(), viewTag, javaUiProps);
+}
+
+void NativeProxy::updateNativeProps(
+    jsi::Runtime &rt,
+    int viewTag,
+    const jsi::Value &nativeProps) {
+  SystraceSection s("NativeProxy::updateNativeProps/CPP");
+  static const auto method =
+      javaPart_->getClass()
+          ->getMethod<void(int, jni::local_ref<WritableMap::javaobject>)>(
+              "updateNativeProps");
+  jni::local_ref<WritableMap::javaobject> javaNativeProps =
+      castWritableMap(WritableNativeMap::newObjectCxxArgs(
+          jsi::dynamicFromValue(rt, nativeProps)));
+  method(javaPart_.get(), viewTag, javaNativeProps);
+}
+
 void NativeProxy::scrollTo(int viewTag, double x, double y, bool animated) {
-  auto method =
+  static auto method =
       javaPart_->getClass()->getMethod<void(int, double, double, bool)>(
           "scrollTo");
   method(javaPart_.get(), viewTag, x, y, animated);
 }
 
 std::vector<std::pair<std::string, double>> NativeProxy::measure(int viewTag) {
-  auto method =
+  static auto method =
       javaPart_->getClass()->getMethod<local_ref<JArrayFloat>(int)>("measure");
   local_ref<JArrayFloat> output = method(javaPart_.get(), viewTag);
   size_t size = output->size();
@@ -466,16 +527,11 @@ std::vector<std::pair<std::string, double>> NativeProxy::measure(int viewTag) {
 #endif // RCT_NEW_ARCH_ENABLED
 
 #ifdef RCT_NEW_ARCH_ENABLED
-inline jni::local_ref<ReadableMap::javaobject> castReadableMap(
-    jni::local_ref<ReadableNativeMap::javaobject> const &nativeMap) {
-  return make_local(reinterpret_cast<ReadableMap::javaobject>(nativeMap.get()));
-}
-
 void NativeProxy::synchronouslyUpdateUIProps(
     jsi::Runtime &rt,
     Tag tag,
     const jsi::Value &props) {
-  static const auto method =
+  static auto method =
       javaPart_->getClass()
           ->getMethod<void(int, jni::local_ref<ReadableMap::javaobject>)>(
               "synchronouslyUpdateUIProps");
@@ -499,12 +555,12 @@ int NativeProxy::registerSensor(
       SensorSetter::newObjectCxxArgs(std::move(setter)).get());
 }
 void NativeProxy::unregisterSensor(int sensorId) {
-  auto method = javaPart_->getClass()->getMethod<void(int)>("unregisterSensor");
+  static auto method = javaPart_->getClass()->getMethod<void(int)>("unregisterSensor");
   method(javaPart_.get(), sensorId);
 }
 
 void NativeProxy::setGestureState(int handlerTag, int newState) {
-  auto method =
+  static auto method =
       javaPart_->getClass()->getMethod<void(int, int)>("setGestureState");
   method(javaPart_.get(), handlerTag, newState);
 }
@@ -513,7 +569,7 @@ void NativeProxy::configureProps(
     jsi::Runtime &rt,
     const jsi::Value &uiProps,
     const jsi::Value &nativeProps) {
-  auto method = javaPart_->getClass()
+  static auto method = javaPart_->getClass()
                     ->getMethod<void(
                         ReadableNativeArray::javaobject,
                         ReadableNativeArray::javaobject)>("configureProps");
@@ -528,7 +584,7 @@ void NativeProxy::configureProps(
 
 int NativeProxy::subscribeForKeyboardEvents(
     std::function<void(int, int)> keyboardEventDataUpdater) {
-  auto method = javaPart_->getClass()
+  static auto method = javaPart_->getClass()
                     ->getMethod<int(KeyboardEventDataUpdater::javaobject)>(
                         "subscribeForKeyboardEvents");
   return method(
@@ -539,7 +595,7 @@ int NativeProxy::subscribeForKeyboardEvents(
 }
 
 void NativeProxy::unsubscribeFromKeyboardEvents(int listenerId) {
-  auto method = javaPart_->getClass()->getMethod<void(int)>(
+  static auto method = javaPart_->getClass()->getMethod<void(int)>(
       "unsubscribeFromKeyboardEvents");
   method(javaPart_.get(), listenerId);
 }
diff --git a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h
index d02917d..a2a71d0 100644
--- a/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h
+++ b/node_modules/react-native-reanimated/android/src/main/cpp/NativeProxy.h
@@ -188,10 +188,6 @@ class NativeProxy : public jni::HybridClass<NativeProxy> {
   void installJSIBindings(
       jni::alias_ref<JavaMessageQueueThread::javaobject> messageQueueThread,
       jni::alias_ref<JFabricUIManager::javaobject> fabricUIManager);
-  void synchronouslyUpdateUIProps(
-      jsi::Runtime &rt,
-      Tag viewTag,
-      const jsi::Value &uiProps);
 #else
   void installJSIBindings(
       jni::alias_ref<JavaMessageQueueThread::javaobject> messageQueueThread);
@@ -215,9 +211,17 @@ class NativeProxy : public jni::HybridClass<NativeProxy> {
       std::function<void(int, int)> keyboardEventDataUpdater);
   void unsubscribeFromKeyboardEvents(int listenerId);
 #ifdef RCT_NEW_ARCH_ENABLED
-  // nothing
+  void synchronouslyUpdateUIProps(
+      jsi::Runtime &rt,
+      Tag viewTag,
+      const jsi::Value &uiProps);
 #else
   void updateProps(jsi::Runtime &rt, int viewTag, const jsi::Object &props);
+    void updateUiProps(jsi::Runtime &rt, int viewTag, const jsi::Value &uiProps);
+    void updateNativeProps(
+        jsi::Runtime &rt,
+        int viewTag,
+        const jsi::Value &nativeProps);
   void scrollTo(int viewTag, double x, double y, bool animated);
   std::vector<std::pair<std::string, double>> measure(int viewTag);
 #endif
diff --git a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java
index 1d18851..b6dbb28 100644
--- a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java
+++ b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/NodesManager.java
@@ -26,6 +26,7 @@ import com.facebook.react.uimanager.UIManagerReanimatedHelper;
 import com.facebook.react.uimanager.events.Event;
 import com.facebook.react.uimanager.events.EventDispatcherListener;
 import com.facebook.react.uimanager.events.RCTEventEmitter;
+import com.facebook.systrace.Systrace;
 import com.swmansion.reanimated.layoutReanimation.AnimationsManager;
 import java.util.ArrayList;
 import java.util.Collections;
@@ -231,6 +232,7 @@ public class NodesManager implements EventDispatcherListener {
   }
 
   private void onAnimationFrame(long frameTimeNanos) {
+
     currentFrameTimeMs = frameTimeNanos / 1000000.;
 
     while (!mEventQueue.isEmpty()) {
@@ -326,6 +328,8 @@ public class NodesManager implements EventDispatcherListener {
   }
 
   public void updateProps(int viewTag, Map<String, Object> props) {
+    Systrace.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE, "NodesManager::updateProps/JAVA");
+
     // TODO: update PropsNode to use this method instead of its own way of updating props
     boolean hasUIProps = false;
     boolean hasNativeProps = false;
@@ -364,6 +368,24 @@ public class NodesManager implements EventDispatcherListener {
         sendEvent("onReanimatedPropsChange", evt);
       }
     }
+
+    Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);
+  }
+
+  public void updateUiProps(int viewTag, ReadableMap uiProps) {
+    Systrace.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE, "NodesManager::updateUiProps/JAVA");
+    if (viewTag != View.NO_ID) {
+      mUIImplementation.synchronouslyUpdateViewOnUIThread(viewTag, new ReactStylesDiffMap(uiProps));
+    }
+    Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);
+  }
+
+  public void updateNativeProps(int viewTag, WritableMap nativeProps) {
+    Systrace.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE, "NodesManager::updateNativeProps/JAVA");
+    if (viewTag != View.NO_ID) {
+      enqueueUpdateViewOnNativeThread(viewTag, nativeProps, true);
+    }
+    Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);
   }
 
   public void synchronouslyUpdateUIProps(int viewTag, ReadableMap uiProps) {
diff --git a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/ReanimatedPackage.java b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/ReanimatedPackage.java
index e426da6..442d155 100644
--- a/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/ReanimatedPackage.java
+++ b/node_modules/react-native-reanimated/android/src/main/java/com/swmansion/reanimated/ReanimatedPackage.java
@@ -66,7 +66,6 @@ public class ReanimatedPackage extends TurboReactPackage implements ReactPackage
 
   private UIManagerModule createUIManager(final ReactApplicationContext reactContext) {
     ReactMarker.logMarker(CREATE_UI_MANAGER_MODULE_START);
-    Systrace.beginSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE, "createUIManagerModule");
     final ReactInstanceManager reactInstanceManager = getReactInstanceManager(reactContext);
     int minTimeLeftInFrameForNonBatchedOperationMs = -1;
     try {
@@ -75,7 +74,6 @@ public class ReanimatedPackage extends TurboReactPackage implements ReactPackage
           reactInstanceManager.getOrCreateViewManagers(reactContext),
           minTimeLeftInFrameForNonBatchedOperationMs);
     } finally {
-      Systrace.endSection(Systrace.TRACE_TAG_REACT_JAVA_BRIDGE);
       ReactMarker.logMarker(CREATE_UI_MANAGER_MODULE_END);
     }
   }
diff --git a/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java b/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java
index 2922d41..ff72756 100644
--- a/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java
+++ b/node_modules/react-native-reanimated/android/src/paper/java/com/swmansion/reanimated/NativeProxy.java
@@ -195,7 +195,17 @@ public class NativeProxy {
   }
 
   @DoNotStrip
-  private void synchronouslyUpdateUIProps(int viewTag, ReadableMap uiProps) {
+  private void updateUiProps(int viewTag, ReadableMap uiProps) {
+    mNodesManager.updateUiProps(viewTag, uiProps);
+  }
+
+  @DoNotStrip
+  private void updateNativeProps(int viewTag, WritableMap nativeProps) {
+    mNodesManager.updateNativeProps(viewTag, nativeProps);
+  }
+
+  @DoNotStrip
+  private void synchronouslyUpdateUIProps(int viewTag, WritableMap uiProps) {
     mNodesManager.synchronouslyUpdateUIProps(viewTag, uiProps);
   }
 
diff --git a/node_modules/react-native-reanimated/ios/.DS_Store b/node_modules/react-native-reanimated/ios/.DS_Store
new file mode 100644
index 0000000..06ec4ca
Binary files /dev/null and b/node_modules/react-native-reanimated/ios/.DS_Store differ
diff --git a/node_modules/react-native-reanimated/lib/.DS_Store b/node_modules/react-native-reanimated/lib/.DS_Store
new file mode 100644
index 0000000..fb1c9d2
Binary files /dev/null and b/node_modules/react-native-reanimated/lib/.DS_Store differ
diff --git a/node_modules/react-native-reanimated/plugin.js b/node_modules/react-native-reanimated/plugin.js
index b4626f3..a3f71c0 100644
--- a/node_modules/react-native-reanimated/plugin.js
+++ b/node_modules/react-native-reanimated/plugin.js
@@ -73,7 +73,11 @@ const globals = new Set([
   '_updateDataSynchronously',
   'eval',
   '_updatePropsPaper',
+  '_updateUiPropsPaper',
+  '_updateNativePropsPaper',
   '_updatePropsFabric',
+  '_beginSection',
+  '_endSection',
   '_removeShadowNodeFromRegistry',
   'RegExp',
   'Error',
@@ -145,6 +149,7 @@ const blacklistedFunctions = new Set([
   'call',
   '__callAsync',
   'includes',
+  'has',
 ]);
 
 const possibleOptFunction = new Set(['interpolate']);
diff --git a/node_modules/react-native-reanimated/src/.DS_Store b/node_modules/react-native-reanimated/src/.DS_Store
new file mode 100644
index 0000000..435fd10
Binary files /dev/null and b/node_modules/react-native-reanimated/src/.DS_Store differ
diff --git a/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts b/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts
index 174405a..1acaf6b 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/UpdateProps.ts
@@ -28,6 +28,105 @@ export const colorProps = [
 
 export const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);
 
+const uiPropsSet = Object.keys({
+  opacity: true,
+  transform: true,
+  /* colors */
+  backgroundColor: true,
+  borderRightColor: true,
+  borderBottomColor: true,
+  borderColor: true,
+  borderEndColor: true,
+  borderLeftColor: true,
+  borderStartColor: true,
+  borderTopColor: true,
+  /* ios styles */
+  shadowOpacity: true,
+  shadowRadius: true,
+  /* legacy android transform properties */
+  scaleX: true,
+  scaleY: true,
+  translateX: true,
+  translateY: true,
+});
+
+const nativePropsSet = Object.keys({
+  borderBottomWidth: true,
+  borderEndWidth: true,
+  borderLeftWidth: true,
+  borderRightWidth: true,
+  borderStartWidth: true,
+  borderTopWidth: true,
+  borderWidth: true,
+  bottom: true,
+  flex: true,
+  flexGrow: true,
+  flexShrink: true,
+  height: true,
+  left: true,
+  margin: true,
+  marginBottom: true,
+  marginEnd: true,
+  marginHorizontal: true,
+  marginLeft: true,
+  marginRight: true,
+  marginStart: true,
+  marginTop: true,
+  marginVertical: true,
+  maxHeight: true,
+  maxWidth: true,
+  minHeight: true,
+  minWidth: true,
+  padding: true,
+  paddingBottom: true,
+  paddingEnd: true,
+  paddingHorizontal: true,
+  paddingLeft: true,
+  paddingRight: true,
+  paddingStart: true,
+  paddingTop: true,
+  paddingVertical: true,
+  right: true,
+  start: true,
+  top: true,
+  width: true,
+  zIndex: true,
+  borderBottomEndRadius: true,
+  borderBottomLeftRadius: true,
+  borderBottomRightRadius: true,
+  borderBottomStartRadius: true,
+  borderRadius: true,
+  borderTopEndRadius: true,
+  borderTopLeftRadius: true,
+  borderTopRightRadius: true,
+  borderTopStartRadius: true,
+  elevation: true,
+  fontSize: true,
+  lineHeight: true,
+  textShadowRadius: true,
+  letterSpacing: true,
+  /* strings */
+  display: true,
+  backfaceVisibility: true,
+  overflow: true,
+  resizeMode: true,
+  fontStyle: true,
+  fontWeight: true,
+  textAlign: true,
+  textDecorationLine: true,
+  fontFamily: true,
+  textAlignVertical: true,
+  fontVariant: true,
+  textDecorationStyle: true,
+  textTransform: true,
+  writingDirection: true,
+  /* text color */
+  color: true,
+  tintColor: true,
+  shadowColor: true,
+  placeholderTextColor: true,
+});
+
 let updatePropsByPlatform;
 if (shouldBeUseWeb()) {
   updatePropsByPlatform = (
@@ -69,18 +168,47 @@ if (shouldBeUseWeb()) {
     ): void => {
       'worklet';
 
+      if (_WORKLET) _beginSection('updatePropsByPlatform/JS');
+
       for (const key in updates) {
         if (ColorProperties.indexOf(key) !== -1) {
           updates[key] = processColor(updates[key]);
         }
       }
+
+      let hasNativeProps = false;
+      let hasJsProps = false;
+      for (const key of Object.keys(updates)) {
+        if (uiPropsSet.includes(key)) {
+          // do nothing
+        } else if (nativePropsSet.includes(key)) {
+          hasNativeProps = true;
+        } else {
+          hasJsProps = true;
+        }
+      }
+
+      let nativeUpdatePropsFunction: typeof _updatePropsPaper;
+      if (!hasNativeProps && !hasJsProps) {
+        // only UI props
+        nativeUpdatePropsFunction = _updateUiPropsPaper;
+      } else if (!hasJsProps) {
+        // only UI or native props
+        nativeUpdatePropsFunction = _updateNativePropsPaper;
+      } else {
+        // has JS props, use general implementation
+        nativeUpdatePropsFunction = _updatePropsPaper;
+      }
+
       viewDescriptors.value.forEach((viewDescriptor) => {
-        _updatePropsPaper(
+        nativeUpdatePropsFunction(
           viewDescriptor.tag,
           viewDescriptor.name || 'RCTView',
           updates
         );
       });
+
+      if (_WORKLET) _endSection();
     };
   }
 }
diff --git a/node_modules/react-native-reanimated/src/reanimated2/core.ts b/node_modules/react-native-reanimated/src/reanimated2/core.ts
index 68bace9..9118d76 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/core.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/core.ts
@@ -28,7 +28,7 @@ if (global._setGlobalConsole === undefined) {
 export type ReanimatedConsole = Pick<
   Console,
   'debug' | 'log' | 'warn' | 'info' | 'error'
->;
+  >;
 
 const testWorklet: BasicWorkletFunction<void> = () => {
   'worklet';
@@ -64,11 +64,11 @@ export const isConfiguredCheck: () => void = () => {
 
 const configurationCheckWrapper = __DEV__
   ? <T extends Array<any>, U>(fn: (...args: T) => U) => {
-      return (...args: T): U => {
-        isConfigured(true);
-        return fn(...args);
-      };
-    }
+    return (...args: T): U => {
+      isConfigured(true);
+      return fn(...args);
+    };
+  }
   : <T extends Array<any>, U>(fn: (...args: T) => U) => fn;
 
 export const startMapper = __DEV__
@@ -145,7 +145,6 @@ function valueUnpacker(objectToUnpack: any, category?: string): any {
   } else if (category === 'RemoteFunction') {
     const fun = () => {
       throw new Error(`Tried to synchronously call a non-worklet function on the UI thread.
-
 Possible solutions are:
   a) If you want to synchronously execute this method, mark it as a worklet
   b) If you want to execute this function on the JS thread, wrap it using \`runOnJS\``);
@@ -213,6 +212,22 @@ if (!isWeb() && isConfigured()) {
       info: runOnJS(capturableConsole.info),
     };
     _setGlobalConsole(console);
+
+    const nativeRequestAnimationFrame = global.requestAnimationFrame;
+    let callbacks: Array<(time: number) => void> = [];
+    global.requestAnimationFrame = (
+      callback: (timestamp: number) => void
+    ): number => {
+      callbacks.push(callback);
+      if (callbacks.length === 1) {
+        nativeRequestAnimationFrame((timestamp) => {
+          const currentCallbacks = callbacks;
+          callbacks = [];
+          currentCallbacks.forEach((f) => f(timestamp));
+        });
+      }
+      return -1;
+    };
   })();
 }
 
diff --git a/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts b/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts
index f89a69c..af9ce4e 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/globals.d.ts
@@ -45,6 +45,16 @@ declare global {
     shadowNodeWrapper: ShadowNodeWrapper,
     props: StyleProps | AnimatedStyle
   ) => void;
+  const _updateUiPropsPaper: (
+    tag: number,
+    name: string,
+    updates: StyleProps | AnimatedStyle
+  ) => void;
+  const _updateNativePropsPaper: (
+    tag: number,
+    name: string,
+    updates: StyleProps | AnimatedStyle
+  ) => void;
   const _removeShadowNodeFromRegistry: (
     shadowNodeWrapper: ShadowNodeWrapper
   ) => void;
@@ -66,6 +76,9 @@ declare global {
     now: () => number;
   };
   const _frameCallbackRegistry: FrameCallbackRegistryUI;
+  const requestAnimationFrame: (callback: (time: number) => void) => number;
+  const _beginSection: (name: string) => void;
+  const _endSection: () => void;
 
   namespace NodeJS {
     interface Global {
@@ -122,6 +135,9 @@ declare global {
       __workletsCache?: Map<string, (...args: any[]) => any>;
       __handleCache?: WeakMap<any, any>;
       __mapperRegistry?: MapperRegistry;
+      requestAnimationFrame: (callback: (time: number) => void) => number;
+      _beginSection: (name: string) => void;
+      _endSection: () => void;
     }
   }
 }
diff --git a/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts b/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts
index 37902a1..4f78046 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/hook/useAnimatedStyle.ts
@@ -21,7 +21,7 @@ import {
   ViewDescriptorsSet,
   ViewRefSet,
 } from '../ViewDescriptorsSet';
-import { isJest, shouldBeUseWeb } from '../PlatformChecker';
+import { isJest } from '../PlatformChecker';
 import {
   AnimationObject,
   Timestamp,
@@ -260,6 +260,7 @@ function styleUpdater(
       updateProps(viewDescriptors, newValues, maybeViewRef);
     }
   }
+
 }
 
 function jestStyleUpdater(
@@ -460,15 +461,6 @@ export function useAnimatedStyle<T extends AnimatedStyle>(
       };
     }
 
-    if (!shouldBeUseWeb()) {
-      updaterFn = () => {
-        'worklet';
-        const style = updaterFn();
-        parseColors(style);
-        return style;
-      };
-    }
-
     if (isJest()) {
       fun = () => {
         'worklet';
diff --git a/node_modules/react-native-reanimated/src/reanimated2/hook/useSharedValue.ts b/node_modules/react-native-reanimated/src/reanimated2/hook/useSharedValue.ts
index 6b4bae2..d5e3423 100644
--- a/node_modules/react-native-reanimated/src/reanimated2/hook/useSharedValue.ts
+++ b/node_modules/react-native-reanimated/src/reanimated2/hook/useSharedValue.ts
@@ -7,7 +7,7 @@ export function useSharedValue<T>(
   init: T,
   oneWayReadsOnly = false
 ): SharedValue<T> {
-  const ref = useRef<SharedValue<T>>(makeMutable(init, oneWayReadsOnly));
+  const ref = useRef<SharedValue<T>>(null);
 
   if (ref.current === null) {
     ref.current = makeMutable(init, oneWayReadsOnly);
